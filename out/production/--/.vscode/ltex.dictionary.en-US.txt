另一个后果是，并发性错误变得更加明显。随着并行量的增加，竞赛条件、死锁和其他与多线程之间的交互问题往往更频繁地表现出来。Another
我们不仅越来越多地看到对并发性的需求，而且还看到编写并发性软件是多么困难。Not
这样做的一个结果是，并发编程变得越来越重要。为了从现代处理器中获得良好的性能，需要多个执行线程。A
除了计算机硬件的变化导致并发性增加外，我们还看到有更多的设备具有永远在线的互联网连接。不幸的是，随着连接性的增加，安全漏洞的数量也在增加。In
目前还不清楚我们是否有API、工具和编程模型来有效地利用这些设备，或适应环境的变化。
以及它们所连接的网络的变化无常的制约。and
它们受到电池电量的限制，They
我想强调的最后一个趋势是越来越多的移动性和连接性。设备是移动的，总是处于开启状态，并且总是连接到网络和远程计算资源。The
另一方面，我们有一般的设计原则，可以用来影响你的软件系统是如何组合的。And
Principles：Software
x，但是在他们理解之前，他们不会和你交流。他们也想要z。
x，但是在他们理解之前，他们不会和你交流。他们也想要z。And
这就是为什么现代敏捷方法论在当代软件工程和软件开发实践中如此重要的原因，因为现在的需求本质上是如此的流动和动态。采用灵活的方法是必要的。他们可以用动态需求来解决这个问题，因为你会发现客户改变了主意，或者根本不一定理解他们想要什么，或者甚至看一眼你已经放在一起的原型，这会让他们意识到其他需求或者其他他们想要的特性，而这些不一定在已经商定的项目的原始范围之内。so
map组合：composition
